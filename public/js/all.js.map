{"version":3,"sources":["app.js","controllers/account.js","controllers/auth.js","controllers/companies.js","controllers/company.js","controllers/job.js","controllers/jobs.js","controllers/main.js","controllers/user.js","services/accountData.js","services/auth.js","services/companies.js","services/elements.js","services/form.js","services/jobs.js","services/location.js","services/modal.js","services/validation.js"],"names":[],"mappingszNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrhxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrttxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["'use strict';\r\n\r\n/**\r\n * @ngdoc overview\r\n * @name jpApp\r\n * @description\r\n * # jpApp\r\n *\r\n * Main module of the application.\r\n */\r\nangular\r\n\t.module('jpApp', [\r\n\t\t'ngAnimate',\r\n\t\t'ngCookies',\r\n\t\t'ngResource',\r\n\t\t'ngRoute',\r\n\t\t'ngSanitize',\r\n\t\t'ngTouch',\r\n\t\t'ui.router', \r\n\t\t'satellizer'\r\n\t])\r\n\t.config(function ($routeProvider,$locationProvider,$stateProvider, $urlRouterProvider, $authProvider) {\r\n\t\tconsole.log('Route Provider',$routeProvider);\r\n\t\t\r\n\t\t$authProvider.loginUrl = '/api/login';\r\n\t\t\r\n\t\t$authProvider.linkedin({\r\n\t\t\tclientId: '75835cv03xc5be'\r\n\t\t});\r\n\t\t\r\n\t\t//$urlRouterProvider.otherwise('/');\r\n\t\t\r\n\t\t$routeProvider\r\n\t\t//$stateProvider\r\n\t\t\t.when('/',{\r\n\t\t\t\ttemplateUrl\t:\t'/views/main.html',\r\n\t\t\t\tcontroller\t:\t'MainCtrl',\r\n\t\t\t\tcontrollerAs\t:\t'main',\r\n\t\t\t\tresolve : {\r\n\t\t\t\t\tinit : function($rootScope,location){\r\n\t\t\t\t\t\tconsole.log('rootScope',$rootScope);\r\n\t\t\t\t\t\t$rootScope.$location.title = $rootScope.$location.base;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tangular.element('.progress').hide();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t$rootScope.logged_in = false;\r\n\t\t\r\n\t\t\t\t\t\tangular.element(\".dropdown-button\").dropdown();\r\n\t\t\t\t\t\tangular.element(\".account-collapse\").sideNav();\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!$rootScope.user){\r\n\t\t\t\t\t\t\t$rootScope.user = {};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//Get Home location of the current user\r\n\t\t\t\t\t\tif(navigator.geolocation && !$rootScope.user.location) {\r\n\t\t\t\t\t\t\t//console.log('Location Needed');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t$rootScope.user.location =\t{};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn location.getLocation().then(function(result){\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconsole.log('Location Result',result);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t$rootScope.user.location.location = result[1].formatted_address;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t$rootScope.user.location.place_id = result[1].place_id;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t$rootScope.$location.title = 'Jobs in '+$rootScope.user.location.location;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tMaterialize.updateTextFields();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tangular.element('.progress').hide();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.when('/jobs',{\r\n\t\t\t\ttemplateUrl\t:\t'/views/jobs.html',\r\n\t\t\t\tcontroller\t:\t'JobsCtrl',\r\n\t\t\t\tcontrollerAs: \t'jobs',\r\n\t\t\t\tresolve:\t{\r\n\t\t\t\t\tjobsData : function(jobs,$rootScope){\r\n\t\t\t\t\t\t$rootScope.$location.title = $rootScope.$location.base;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tangular.element('.progress').show();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn jobs.getData('jobs').then(function(result){\r\n\t\t\t\t\t\t\tMaterialize.toast('Got '+result.data.length+' Jobs', 3000);\r\n\t\t\t\t\t\t\tconsole.log('Got some jobs',result);\r\n\t\t\t\t\t\t\tangular.element('.progress').hide();\r\n\t\t\t\t\t\t\treturn result.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.when('/jobs/:jobId',{\r\n\t\t\t\ttemplateUrl\t:\t'/views/partials/jobs/view-job.html',\r\n\t\t\t\tcontroller\t:\t'JobCtrl',\r\n\t\t\t\tcontrollerAs: \t'job',\r\n\t\t\t\tresolve : {\r\n\t\t\t\t\t\r\n\t\t\t\t\tjobData : function(jobs,$route,$rootScope){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t$rootScope.$location.title = $rootScope.$location.base;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tangular.element('.progress').show();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn jobs.getData('jobs',$route.current.params.jobId).then(function(result){\r\n\t\t\t\t\t\t\tangular.element('.progress').hide();\r\n\t\t\t\t\t\t\treturn result.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.when('/companies',{\r\n\t\t\t\ttemplateUrl\t:\t'/views/companies.html',\r\n\t\t\t\tcontroller\t:\t'CompaniesCtrl',\r\n\t\t\t\tcontrollerAs: \t'Companies',\r\n\t\t\t\tresolve : {\r\n\t\t\t\t\tcompaniesData : function(companies,$route,$rootScope){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t$rootScope.$location.title = $rootScope.$location.base;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tangular.element('.progress').show();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn companies.getData('companies').then(function(result){\r\n\t\t\t\t\t\t\tangular.element('.progress').hide();\r\n\t\t\t\t\t\t\treturn result.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.when('/companies/:companyId',{\r\n\t\t\t\ttemplateUrl\t:\t'/views/partials/companies/view-company.html',\r\n\t\t\t\tcontroller\t:\t'CompanyCtrl',\r\n\t\t\t\tcontrollerAs: \t'Company',\r\n\t\t\t\tresolve \t: {\r\n\t\t\t\t\t\r\n\t\t\t\t\tcompanyData : function(companies,$route,$rootScope){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t$rootScope.$location.title = $rootScope.$location.base;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tangular.element('.progress').show();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn companies.getData('companies',$route.current.params.companyId).then(function(result){\r\n\t\t\t\t\t\t\tangular.element('.progress').hide();\r\n\t\t\t\t\t\t\treturn result.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.when('/myaccount',{\r\n\t\t\t\ttemplateUrl\t:\t'/views/partials/account/view-account.html',\r\n\t\t\t\tcontroller\t:\t'AccountCtrl',\r\n\t\t\t\tcontrollerAs: \t'Account',\r\n\t\t\t\tresolve \t: {\r\n\t\t\t\t\taccountData : function(accountDataService){\r\n\t\t\t\t\t\treturn accountDataService.then(function(result){\r\n\t\t\t\t\t\t\tconsole.log('Result',result);\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}).catch(function(error){\r\n\t\t\t\t\t\t\tconsole.log('Error',error);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.otherwise({\r\n\t\t\t\ttemplateUrl : \t'Not Found'\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t$stateProvider\r\n\t\t\t.state('/myaccount',{\r\n\t\t\t\ttemplateUrl\t:\t'/views/partials/account/account.html',\r\n\t\t\t\tcontroller\t:\t'AccountCtrl',\r\n\t\t\t\tcontrollerAs: \t'Account',\r\n\t\t\t\tresolve \t: {\r\n\t\t\t\t\taccountData : function(accountDataService){\r\n\t\t\t\t\t\treturn accountDataService.then(function(result){\r\n\t\t\t\t\t\t\tconsole.log('Result',result);\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}).catch(function(error){\r\n\t\t\t\t\t\t\tconsole.log('Error',error);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t}).run(function($rootScope,$state,$stateParams,$location,$auth) {\r\n\t\t\t\r\n\t\t$rootScope.$location = {};\r\n\t\r\n\t\t$rootScope.$location.base = $location.path().split('\\/')[1];\r\n\t\t\r\n\t\tangular.element('.progress').show();\r\n\t\t\r\n\t\t//console.log('Runtime State',$state);\r\n\t\t//Bind when to rootScope\r\n\t\t$rootScope.$state = $state;\r\n\t\t$rootScope.$stateParams = $stateParams;\r\n\t\t$rootScope.$auth = $auth;\r\n\t\t\r\n\t\tconsole.log('Runtime RootScope',$rootScope);\r\n\t\r\n\t}).filter('trusted', function ($sce) {\r\n\t\treturn function(url) {\r\n\t\t\treturn $sce.trustAsResourceUrl(url);\r\n\t\t};\r\n\t});\r\n  \r\n","'use strict';\r\n\r\n/**\r\n * @ngdoc function\r\n * @name jpApp.controller:AccountCtrl\r\n * @description\r\n * # AccountCtrl\r\n * Controller of the jpApp\r\n */\r\nangular.module('jpApp')\r\n\t.controller('AccountCtrl', function ($scope,jobs,$route,$location,$filter,modal,elements,$rootScope,form,accountData)\r\n\t{\r\n\t\t\r\n\t});\r\n","'use strict';\n\n/**\n * @ngdoc function\n * @name jpApp.controller:AuthCtrl\n * @description\n * # AuthCtrl\n * Controller of the jpApp\n */\nangular.module('jpApp')\n\t.controller('AuthCtrl', function ($auth,$state,$rootScope,$scope,validation,form,elements,modal,jobs,companies,$location,$route,auth) {\n\t\tthis.awesomeThings = [\n\t\t  'HTML5 Boilerplate',\n\t\t  'AngularJS',\n\t\t  'Karma'\n\t\t];\n\t\t\n\t\t\n\t\t//var vm = this;\n\t\t\n        $scope.login = function($event) {\n\t\t\t\n\t\t\t//$event.preventDefault();\n\t\t\t\n\t\t\tvar modalContent\t=\tangular.element($event.currentTarget).parents()[1],\n\t\t\t\tform\t\t\t=\tangular.element(modalContent).find('form').serializeArray(),\n\t\t\t\tcredentials\t\t=\t{\n\t\t\t\t\temail\t\t:\t$scope.email,\n\t\t\t\t\tpassword\t: \t$scope.password\n\t\t\t\t};\n\t\t\t\n\t\t\tconsole.log('Login Details',credentials);\n\t\t\t\t\n\t\t\tvalidation.validate(form).then(function(result){\n\t\t\t\t\n\t\t\t\tconsole.log(result);\n\t\t\t\t\n\t\t\t\tif(result.valid){\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t//Use Satellizer's $auth service to login\n\t\t\t\t\t$auth.login(credentials).then(function(result) {\n\t\t\t\t\t\tconsole.log('Data',result);\n\t\t\t\t\t\tconsole.log('Logged in Rootscope',$rootScope);\n\t\t\t\t\t\tconsole.log('Logged in Auth',$auth.isAuthenticated());\n\t\t\t\t\t\tconsole.log('Logged in token',$auth.getToken());\n\t\t\t\t\t\tconsole.log('Logged in payload',$auth.getPayload());\n\t\t\t\t\t\t$rootScope.user.info = result.data.user;\n\t\t\t\t\t\t$scope.closeModal();\n\t\t\t\t\t}).catch(function(error){\n\t\t\t\t\t\tconsole.log('Login Error',error);\n\t\t\t\t\t\t//TO DO Add Error Message to login modal\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tconsole.log(result);\n\t\t\t\t\t//TO DO Add Validation Error Message to login modal\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t});\n\t\t\t\n            \n        };\n\t\t\n\t\t$scope.signIn\t=\tfunction(){\n\t\t\tvar modalType\t=\t'bottom-sheet',\n\t\t\t\tmodalTitle\t=\t'<h4 class=\"left\">Login</h4>',\n\t\t\t\tmodalBody\t=\tform.login(),\n\t\t\t\tmodalFooter\t=\t'';//elements.button({\ttype\t:\t'submit',\tcls:\t'btn teal accent-3',\tngClick\t:\t'login($event)'\t},'Login');\n\t\t\t\t\n\t\t\tmodal.modal(modalType,modalTitle,modalBody,modalFooter,$scope).then(function(result){\n\t\t\t\t//console.log(result);\n\t\t\t\tconsole.log('Auth Details',$rootScope);\n\t\t\t\t\n\t\t\t});\n\t\t};\n\t\t\n\t\t$scope.authenticate = function(provider) {\n\t\t\t$auth.authenticate(provider);\n\t\t};\n\t\t\n\t\t$scope.logout = function() {\n\t\t\t$auth.logout();\n\t\t};\n\t\t\n\t\t$scope.closeModal\t=\tfunction(){\n\t\t\tangular.element('#modal').modal('close');\n\t\t};\n\t\t\n\t\tangular.element('.dropdown-button').dropdown({\n\t\t  inDuration: 300,\n\t\t  outDuration: 225,\n\t\t  constrainWidth: false, // Does not change width of dropdown to that of the activator\n\t\t  hover: true, // Activate on hover\n\t\t  gutter: 0, // Spacing from edge\n\t\t  belowOrigin: true, // Displays dropdown below the button\n\t\t  alignment: 'left', // Displays dropdown with edge aligned to the left of button\n\t\t  stopPropagation: false // Stops event propagation\n\t\t});\n\t});\n","'use strict';\r\n\r\n/**\r\n * @ngdoc function\r\n * @name jpApp.controller:JobsCtrl\r\n * @description\r\n * # JobsCtrl\r\n * Controller of the jpApp\r\n */\r\nangular.module('jpApp')\r\n\t.controller('CompaniesCtrl', function ($scope,jobs,companies,$routeParams,$route,$location,$compile,$rootScope,companiesData)\r\n\t{\r\n\t\tthis.awesomeThings = [\r\n\t\t  'HTML5 Boilerplate',\r\n\t\t  'AngularJS',\r\n\t\t  'Karma'\r\n\t\t];\r\n\t\t\r\n\t\t$scope.companies = this.companies = companiesData;\r\n\t\t\r\n\t\tconsole.log('Companies ',this.companies);\r\n\t});","'use strict';\r\n\r\n/**\r\n * @ngdoc function\r\n * @name jpApp.controller:JobsCtrl\r\n * @description\r\n * # CompanysCtrl\r\n * Controller of the jpApp\r\n */\r\nangular.module('jpApp')\r\n\t.controller('CompanyCtrl', function ($scope,companies,jobs,$route,$location,$filter,modal,elements,$rootScope,form,companyData)\r\n\t{\r\n\t\t\r\n\t\tvar autocomplete,CompanyCtrl = this;\r\n\t\t\r\n\t\tthis.data = {};\r\n\t\t\r\n\t\tconsole.log($route);\r\n\t\t\r\n\t\t$scope.currentAsset = CompanyCtrl.currentAsset = companyData;\r\n\t\t\r\n\t\t$scope.companyOptions = function(options) {\r\n\t\t\tswitch(options){\r\n\t\t\t\tcase 'company_status' :  return function(){\r\n\t\t\t\t\tvar selected = $filter('filter')($rootScope.company.options.company_status, {value: CompanyCtrl.currentAsset.status});\r\n\t\t\t\t\treturn (CompanyCtrl.currentAsset.status && selected.length) ? selected[0].text : 'Not set';\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t$scope.updateCompany = function(){\t\t\t\r\n\t\t\t\r\n\t\t\tthis.data\t=\t{\r\n\t\t\t\tid : CompanyCtrl.currentAsset.id,\r\n\t\t\t\tname : CompanyCtrl.currentAsset.name,\r\n\t\t\t\tdescription : CompanyCtrl.currentAsset.description,\r\n\t\t\t\tcompany_category_id : CompanyCtrl.currentAsset.company_category.id,\r\n\t\t\t\temail : CompanyCtrl.currentAsset.email,\r\n\t\t\t\taddress : CompanyCtrl.currentAsset.address,\r\n\t\t\t\tzipcode\t: CompanyCtrl.currentAsset.zipcode,\r\n\t\t\t\tphone : CompanyCtrl.currentAsset.phone,\r\n\t\t\t\tlogo : CompanyCtrl.currentAsset.logo,\r\n\t\t\t\tstatus : CompanyCtrl.currentAsset.status\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconsole.log('Data',this.data);\r\n\t\t\t\r\n\t\t\tcompanies.sendData('companies',$route.current.params.companyId,this.data).then(function(result){\r\n\t\t\t\tconsole.log('Got a Response',result);\r\n\t\t\t\t$scope.cancel();\r\n\t\t\t\t////$scope.currentAsset = result.data;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t$scope.cancel = function(){\r\n\t\t\tconsole.log('Edit Cancelled');\r\n\t\t\tangular.element('#modal').modal('close');\r\n\t\t\t//angular.element('#job_location').val('');\r\n\t\t\t//angular.element('#modal form').get(0).reset();\r\n\t\t\t//$scope.currentAsset = $scope.cache;\r\n\t\t\t$route.reload();\r\n\t\t}\r\n\t\t\r\n\t\t$scope.edit = function(){\r\n\t\t\tvar modalType\t=\t'bottom-sheet',\r\n\t\t\t\tmodalTitle\t=\t'',\r\n\t\t\t\tmodalBody\t=\t'',\r\n\t\t\t\tmodalFooter\t=\t'';\r\n\t\t\t\r\n\t\t\tmodalTitle\t+=\t'<h4 class=\"left\">Edit Company</h4>';\r\n\t\t\tmodalTitle\t+=\t'<div class=\"right\">'+elements.form.check({name : 'company_category' , model:'currentAsset.status',colSize: 12,label1:'Draft',label2:'Published'})+'</div>';\r\n\t\t\t\r\n\t\t\tmodalFooter\t+=\telements.button({\ttype\t:\t'button',\tcls:\t'btn  red accent-4',\tngClick\t:\t'cancel()'\t, label : 'Cancel'});\r\n\t\t\tmodalFooter\t+=\telements.button({\ttype\t:\t'submit',\tcls:\t'btn',\tngClick\t:\t'updateCompany()'\t, label : 'Save'});\r\n\t\t\t\r\n\t\t\tmodalBody\t=\tform.editCompany();\r\n\t\t\t\r\n\t\t\tmodal.modal(modalType,modalTitle,modalBody,modalFooter,$scope).then(function(result){\r\n\t\t\t\tangular.element('select').material_select();\r\n\t\t\t\t\r\n\t\t\t\tCKEDITOR.editorConfig\t=\tfunction( config ){\r\n\t\t\t\t\tconfig.toolbar\t=\t[\r\n\t\t\t\t\t\t{name:'clipboard',items:['Cut','Copy','Paste','PasteText','Undo','Redo']},\r\n\t\t\t\t\t\t{name:'paragraph',items:['NumberedList','BulletedList']}\r\n\t\t\t\t\t];\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tCKEDITOR.replace( 'company_description' ).on( 'change', function( evt ) {\r\n\t\t\t\t\tCompanyCtrl.currentAsset.description = evt.editor.getData();\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\tangular.element('.chips-initial').on('chip.add', function(e, chip){\r\n\t\t\t\t\tCompanyCtrl.currentAsset.required_skills = angular.element(this).material_chip('data');\r\n\t\t\t\t}).on('chip.delete', function(e, chip){\r\n\t\t\t\t\tCompanyCtrl.currentAsset.required_skills = angular.element(this).material_chip('data');\r\n\t\t\t\t}).material_chip({\r\n\t\t\t\t\tplaceholder: 'Skills',\r\n\t\t\t\t\tdata: CompanyCtrl.currentAsset.required_skills\r\n\t\t\t\t});\r\n\t\t\t\t*/\r\n\t\t\t\t\r\n\t\t\t\t// Create the autocomplete object, restricting the search to geographical\r\n\t\t\t\t// location types.\r\n\t\t\t\tautocomplete = new google.maps.places.Autocomplete(\r\n\t\t\t\t\t/** @type {!HTMLInputElement} */(angular.element('input#company_location').get(0)),\r\n\t\t\t\t\t{types: ['geocode']});\r\n\r\n\t\t\t\t// When the user selects an address from the dropdown, populate the address\r\n\t\t\t\t// fields in the form.\r\n\t\t\t\tautocomplete.addListener('place_changed', function(){\r\n\t\t\t\t\tvar place = this.getPlace();\r\n\t\t\t\t\t\r\n\t\t\t\t\t//console.log('Place',place);\r\n\t\t\t\t\t\r\n\t\t\t\t\tCompanyCtrl.currentAsset.location.name = place.name ? place.name : '';\r\n\t\t\t\t\t\r\n\t\t\t\t\tplace.address_components.map(function(value,key){\r\n\t\t\t\t\t\t//console.log('Value',value);\r\n\t\t\t\t\t\tCompanyCtrl.currentAsset.location[value.types[0]] = {};\r\n\t\t\t\t\t\tCompanyCtrl.currentAsset.location[value.types[0]].long_name = value.long_name ? value.long_name : '';\r\n\t\t\t\t\t\tCompanyCtrl.currentAsset.location[value.types[0]].short_name = value.short_name ? value.short_name : '';\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar slider = angular.element('#employees').get(0);\r\n\t\t\t\t\r\n\t\t\t\t//Initalize Typeahead\r\n\t\t\t\tangular.element('.typeahead').each(function(key,value){\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar name = angular.element(value).get(0).name;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconsole.log('Company Cats Bloodhound',elements.form.bloodhound('/company/categories'));\r\n\t\t\t\t\t\r\n\t\t\t\t\tangular.element('#'+name).typeahead(null, {\r\n\t\t\t\t\t\tname: name,\r\n\t\t\t\t\t\tdisplay: 'name',\r\n\t\t\t\t\t\tsource: elements.form.bloodhound('/company/categories').ttAdapter(),\r\n\t\t\t\t\t\thint: true,\r\n\t\t\t\t\t\thighlight: true,\r\n\t\t\t\t\t\tminLength: 0,\r\n\t\t\t\t\t\tlimit: 10,\r\n\t\t\t\t\t\ttemplates: {\r\n\t\t\t\t\t\t\tempty: [\r\n\t\t\t\t\t\t\t\t'<div class=\"tt-suggestion tt-empty-message collection\">',\r\n\t\t\t\t\t\t\t\t'No results were found ...',\r\n\t\t\t\t\t\t\t\t'</div>'\r\n\t\t\t\t\t\t\t].join('\\n'),\r\n\t\t\t\t\t\t\t//header: '<div class=\"collection-header\"><h6>'+name+'</h6></div>'\r\n\t\t\t\t\t\t\t//suggestion: Handlebars.compile('<div class=\"collection-item\">{{value}}</div>')\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tclassNames: {\r\n\t\t\t\t\t\t\tselectable: 'collection-item',\r\n\t\t\t\t\t\t\tdataset : 'collection'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t//identify: function(obj) { return obj.name; },\r\n\t\t\t\t\t}).bind('typeahead:select', function(ev, suggestion) {\r\n\t\t\t\t\t\tvar asset = angular.element(ev.currentTarget).get(0).dataset.asset;\r\n\t\t\t\t\t\t//console.log('Selection(name): ' + suggestion.name);\r\n\t\t\t\t\t\t//console.log('Selection(id): ' + suggestion.id);\r\n\t\t\t\t\t\t//console.log('event: ' + asset);\r\n\t\t\t\t\t\tCompanyCtrl.currentAsset[asset] = suggestion;\r\n\t\t\t\t\t\t//$scope.currentAsset[asset].name = suggestion.name;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconsole.log('Scope asset(id): ' + CompanyCtrl.currentAsset[asset].id);\r\n\t\t\t\t\t\tconsole.log('Scope asset(name): ' + CompanyCtrl.currentAsset[asset].name);\r\n\t\t\t\t\t\t//$scope.currentAsset\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t});\r\n","'use strict';\r\n\r\n/**\r\n * @ngdoc function\r\n * @name jpApp.controller:JobCtrl\r\n * @description\r\n * # JobCtrl\r\n * Controller of the jpApp\r\n */\r\nangular.module('jpApp')\r\n\t.controller('JobCtrl', function ($scope,jobs,$route,$location,$filter,modal,elements,$rootScope,form,jobData)\r\n\t{\r\n\t\t\r\n\t\tvar JobCtrl = this;\r\n\t\t$rootScope.$location.title = '';\r\n\t\t\r\n\t\tvar autocomplete;\r\n\t\t\r\n\t\tJobCtrl.data = {};\r\n\t\t\r\n\t\tconsole.log('jobData',jobData);\r\n\t\t\r\n\t\t$scope.currentAsset = JobCtrl.currentAsset = jobData;\r\n\t\t\r\n\t\tJobCtrl.cache = JobCtrl.currentAsset;\r\n\t\tJobCtrl.currentAsset.pay = {};\r\n\t\tconsole.log('Got a job',JobCtrl.currentAsset);\r\n\t\tJobCtrl.currentAsset.application_deadline ? \r\n\t\t\tJobCtrl.currentAsset.application_deadline = new Date(JobCtrl.currentAsset.application_deadline)\r\n\t\t\t: null;\r\n\t\t$rootScope.$location.title = JobCtrl.currentAsset.title;\r\n\t\t\r\n\t\tJobCtrl.jobOptions = function(options) {\r\n\t\t\tswitch(options){\r\n\t\t\t\tcase 'job_status' :  return function(){\r\n\t\t\t\t\tvar selected = $filter('filter')($rootScope.job.options.job_status, {value: JobCtrl.currentAsset.status});\r\n\t\t\t\t\treturn (JobCtrl.currentAsset.status && selected.length) ? selected[0].text : 'Not set';\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t$scope.updateJob = function(){\t\t\t\r\n\t\t\t\r\n\t\t\tconsole.log('Scope Data',JobCtrl.currentAsset);\r\n\t\t\t\r\n\t\t\tJobCtrl.data\t=\t{\r\n\t\t\t\tid : JobCtrl.currentAsset.id,\r\n\t\t\t\ttitle : JobCtrl.currentAsset.title,\r\n\t\t\t\tdescription : JobCtrl.currentAsset.description,\r\n\t\t\t\tcompany_id : JobCtrl.currentAsset.company.id,\r\n\t\t\t\tjob_category_id : JobCtrl.currentAsset.job_category.id,\r\n\t\t\t\tjob_type_id : JobCtrl.currentAsset.job_type.id,\r\n\t\t\t\tjob_level_id : JobCtrl.currentAsset.job_level.id,\r\n\t\t\t\t//job_salary_id : $scope.currentAsset.salary_type.id,\r\n\t\t\t\tapplication_deadline : JobCtrl.currentAsset.application_deadline,\r\n\t\t\t\tsalary : JobCtrl.currentAsset.salary,\r\n\t\t\t\tstatus : JobCtrl.currentAsset.status,\r\n\t\t\t\tmin_experience : JobCtrl.currentAsset.min_experience,\r\n\t\t\t\tmin_qualification : JobCtrl.currentAsset.min_qualification.name,\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(JobCtrl.currentAsset.location.searched){\r\n\t\t\t\tJobCtrl.data.location = {\r\n\t\t\t\t\tname : JobCtrl.currentAsset.location.name,\r\n\t\t\t\t\tlocality : JobCtrl.currentAsset.location.neighborhood ? JobCtrl.currentAsset.location.neighborhood.long_name : JobCtrl.currentAsset.location.vicinity,\r\n\t\t\t\t\tcity\t:\tJobCtrl.currentAsset.location.locality.long_name,\r\n\t\t\t\t\tcity_code\t:\tJobCtrl.currentAsset.location.locality.long_name,\r\n\t\t\t\t\tstate\t:\tJobCtrl.currentAsset.location.administrative_area_level_1.long_name ? JobCtrl.currentAsset.location.administrative_area_level_1.long_name : '',\r\n\t\t\t\t\tstate_code\t:\tJobCtrl.currentAsset.location.administrative_area_level_1.short_name ? JobCtrl.currentAsset.location.administrative_area_level_1.short_name : '',\r\n\t\t\t\t\tcountry\t:\tJobCtrl.currentAsset.location.country.long_name ? JobCtrl.currentAsset.location.country.long_name : '',\r\n\t\t\t\t\tcountry_code\t: JobCtrl.currentAsset.location.country.short_name ? JobCtrl.currentAsset.location.country.short_name : '',\r\n\t\t\t\t\tlng\t:\tJobCtrl.currentAsset.location.geo.lng,\r\n\t\t\t\t\tlat\t:\tJobCtrl.currentAsset.location.geo.lat,\r\n\t\t\t\t\tref_id\t:\tJobCtrl.currentAsset.location.place_id,\r\n\t\t\t\t\turl\t:\tJobCtrl.currentAsset.location.geo.url,\r\n\t\t\t\t\tzip_code : JobCtrl.currentAsset.location.zipcode ? JobCtrl.currentAsset.location.zipcode : ''\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconsole.log('Data',JobCtrl.data);\r\n\t\t\t\r\n\t\t\tjobs.sendData('jobs',$route.current.params.jobId,JobCtrl.data).then(function(result){\r\n\t\t\t\tconsole.log('Got a Response',result);\r\n\t\t\t\tJobCtrl.reset();\r\n\t\t\t\t////$scope.currentAsset = result.data;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tJobCtrl.reset = function(){\r\n\t\t\tconsole.log('Edit Cancelled');\r\n\t\t\tangular.element('#modal').modal('close');\r\n\t\t\t//angular.element('#job_location').val('');\r\n\t\t\t//angular.element('#modal form').get(0).reset();\r\n\t\t\t//$scope.currentAsset = $scope.cache;\r\n\t\t\t$route.reload();\r\n\t\t}\r\n\t\t\r\n\t\t$scope.edit = function(){\r\n\t\t\tvar modalType\t=\t'bottom-sheet',\r\n\t\t\t\tmodalTitle\t=\t'',\r\n\t\t\t\tmodalBody\t=\t'',\r\n\t\t\t\tmodalFooter\t=\t'';\r\n\t\t\t\r\n\t\t\tmodalTitle\t+=\t'<h4 class=\"left\">Edit Job</h4>';\r\n\t\t\tmodalTitle\t+=\t'<div class=\"right\">'+elements.form.check({name : 'status' , model:'currentAsset.status',colSize: 12,label1:'draft',label2:'published'})+'</div>';\r\n\t\t\t\r\n\t\t\tmodalFooter\t+=\telements.button({\ttype\t:\t'button',\tcls:\t'btn  red accent-4',\tngClick\t:\t'reset()'\t, label : 'Cancel'});\r\n\t\t\tmodalFooter\t+=\telements.button({\ttype\t:\t'submit',\tcls:\t'btn',\tngClick\t:\t'updateJob()'\t, label : 'Save'});\r\n\t\t\t\r\n\t\t\tmodalBody\t=\tform.editJob();\r\n\t\t\t\r\n\t\t\tmodal.modal(modalType,modalTitle,modalBody,modalFooter,$scope).then(function(result){\r\n\t\t\t\tangular.element('select').material_select();\r\n\t\t\t\t//Input elements need to converted to directives\r\n\t\t\t\tCKEDITOR.editorConfig\t=\tfunction( config ){\r\n\t\t\t\t\tconfig.toolbar\t=\t[\r\n\t\t\t\t\t\t{name:'clipboard',items:['Cut','Copy','Paste','PasteText','Undo','Redo']},\r\n\t\t\t\t\t\t{name:'paragraph',items:['NumberedList','BulletedList']}\r\n\t\t\t\t\t];\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tCKEDITOR.replace( 'job_description' ).on( 'change', function( evt ) {\r\n\t\t\t\t\tJobCtrl.currentAsset.description = evt.editor.getData();\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tangular.element('.chips-autocomplete').material_chip();\r\n\t\t\t\t\r\n\t\t\t\tangular.element('.chips-autocomplete').material_chip({\r\n\t\t\t\t\tplaceholder: 'Skills',\r\n\t\t\t\t\tautocompleteData: {\r\n\t\t\t\t\t  'Apple': null,\r\n\t\t\t\t\t  'Microsoft': null,\r\n\t\t\t\t\t  'Google': null\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tangular.element('.chips-autocomplete').on('chip.add', function(e, chip){\r\n\t\t\t\t\tJobCtrl.currentAsset.required_skills = angular.element(this).material_chip('data');\r\n\t\t\t\t}).on('chip.delete', function(e, chip){\r\n\t\t\t\t\tJobCtrl.currentAsset.required_skills = angular.element(this).material_chip('data');\r\n\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\tconsole.log(elements.form.bloodhound('/api/job_skills').index.datums);\r\n\t\t\t\t\r\n\t\t\t\t// Create the autocomplete object, restricting the search to geographical\r\n\t\t\t\t// location types.\r\n\t\t\t\tautocomplete = new google.maps.places.Autocomplete(\r\n\t\t\t\t\t/** @type {!HTMLInputElement} */(angular.element('input#job_location').get(0)),\r\n\t\t\t\t\t{types: ['geocode']});\r\n\r\n\t\t\t\t// When the user selects an address from the dropdown, populate the address\r\n\t\t\t\t// fields in the form.\r\n\t\t\t\tautocomplete.addListener('place_changed', function(){\r\n\t\t\t\t\tvar place = this.getPlace();\r\n\t\t\t\t\t\r\n\t\t\t\t\tconsole.log('Place',place);\r\n\t\t\t\t\t//console.log('Place Long',place.geometry.location.lng());\r\n\t\t\t\t\t\r\n\t\t\t\t\tJobCtrl.currentAsset.location = { searched : true };\r\n\t\t\t\t\t\r\n\t\t\t\t\tJobCtrl.currentAsset.location.name = place.formatted_address;//place.name ? place.name : '';\r\n\t\t\t\t\t\r\n\t\t\t\t\tplace.address_components.map(function(value,key){\r\n\t\t\t\t\t\tconsole.log('Value',value);\r\n\t\t\t\t\t\tJobCtrl.currentAsset.location[value.types[0]] = {};\r\n\t\t\t\t\t\tJobCtrl.currentAsset.location[value.types[0]].long_name = value.long_name ? value.long_name : '';\r\n\t\t\t\t\t\tJobCtrl.currentAsset.location[value.types[0]].short_name = value.short_name ? value.short_name : '';\r\n\t\t\t\t\t});\r\n\t\t\t\t\tJobCtrl.currentAsset.location.place_id = place.place_id ? place.place_id : '';\r\n\t\t\t\t\tJobCtrl.currentAsset.location.vicinity = place.vicinity ? place.vicinity : '';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t//Set location long lat\r\n\t\t\t\t\tJobCtrl.currentAsset.location.geo = { \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlng : place.geometry.location.lng(), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat\t: place.geometry.location.lat(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\turl : place.url\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t//Set url\r\n\t\t\t\t\tconsole.log('Location Asset',JobCtrl.currentAsset.location);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar slider = angular.element('#pay').get(0);\r\n\t\t\t\t//console.log('Salary',parseInt($scope.currentAsset.salary.split(',')[0].toString().replace(/$$|.000/g,'')));\t\t\t\t\r\n\t\t\t\t//console.log('Salary Scope',$scope);\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tnoUiSlider.create(slider, {\r\n\t\t\t\t\tstart: JobCtrl.currentAsset.salary ? [parseInt(JobCtrl.currentAsset.salary.split(',')[0].toString().replace(/$$|.000/g,'')), \r\n\t\t\t\t\t\t\tparseInt(JobCtrl.currentAsset.salary.split(',')[1].toString().replace(/$$|.000/g,''))] : [0,100],\r\n\t\t\t\t\tconnect: true,\r\n\t\t\t\t\tstep: 5,\r\n\t\t\t\t\trange: {\r\n\t\t\t\t\t\t'min': 0,\r\n\t\t\t\t\t\t'max': 1000\r\n\t\t\t\t\t},\r\n\t\t\t\t\tformat: wNumb({\r\n\t\t\t\t\t\tdecimals: 0,\r\n\t\t\t\t\t\tthousand: '.',\r\n\t\t\t\t\t\t//prefix: '$',\r\n\t\t\t\t\t\tpostfix: '.000'\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tslider.noUiSlider.on('update', function(value,handle){\r\n\t\t\t\t\tconsole.log('Slider Changed',value.toString());\r\n\t\t\t\t\tJobCtrl.currentAsset.pay.value  = value;\r\n\t\t\t\t\tJobCtrl.currentAsset.salary  = value.toString();\r\n\t\t\t\t\tJobCtrl.currentAsset.pay.min = value[0];\r\n\t\t\t\t\tangular.element('.range-field span.min').html(value[0]);\r\n\t\t\t\t\tJobCtrl.currentAsset.pay.max  = value[1];\r\n\t\t\t\t\tangular.element('.range-field span.max').html(value[1]);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tangular.element('.datepicker').pickadate({\r\n\t\t\t\t\tselectMonths: true, // Creates a dropdown to control month\r\n\t\t\t\t}).on('change',function(e){\r\n\t\t\t\t\tJobCtrl.currentAsset.application_deadline = new Date(angular.element(e.currentTarget).val());\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t//Initalize Typeahead\r\n\t\t\t\tangular.element('.typeahead').each(function(key,value){\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar name = angular.element(value).get(0).name;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tangular.element('#'+name).typeahead(null, {\r\n\t\t\t\t\t\tname: name,\r\n\t\t\t\t\t\tdisplay: 'name',\r\n\t\t\t\t\t\tsource: elements.form.bloodhound('/api/'+name).ttAdapter(),\r\n\t\t\t\t\t\thint: true,\r\n\t\t\t\t\t\thighlight: true,\r\n\t\t\t\t\t\tminLength: 0,\r\n\t\t\t\t\t\tlimit: 10,\r\n\t\t\t\t\t\ttemplates: {\r\n\t\t\t\t\t\t\tempty: [\r\n\t\t\t\t\t\t\t\t'<div class=\"tt-suggestion tt-empty-message collection\">',\r\n\t\t\t\t\t\t\t\t'No results were found ...',\r\n\t\t\t\t\t\t\t\t'</div>'\r\n\t\t\t\t\t\t\t].join('\\n'),\r\n\t\t\t\t\t\t\t//header: '<div class=\"collection-header\"><h6>'+name+'</h6></div>'\r\n\t\t\t\t\t\t\t//suggestion: Handlebars.compile('<div class=\"collection-item\">{{value}}</div>')\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tclassNames: {\r\n\t\t\t\t\t\t\tselectable: 'collection-item',\r\n\t\t\t\t\t\t\tdataset : 'collection'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t//identify: function(obj) { return obj.name; },\r\n\t\t\t\t\t}).bind('typeahead:select', function(ev, suggestion) {\r\n\t\t\t\t\t\tvar asset = angular.element(ev.currentTarget).get(0).dataset.asset;\r\n\t\t\t\t\t\t//console.log('Selection(name): ' + suggestion.name);\r\n\t\t\t\t\t\t//console.log('Selection(id): ' + suggestion.id);\r\n\t\t\t\t\t\t//console.log('event: ' + asset);\r\n\t\t\t\t\t\tJobCtrl.currentAsset[asset] = suggestion;\r\n\t\t\t\t\t\t//$scope.currentAsset[asset].name = suggestion.name;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconsole.log('Scope asset(id): ' + JobCtrl.currentAsset[asset].id);\r\n\t\t\t\t\t\tconsole.log('Scope asset(name): ' + JobCtrl.currentAsset[asset].name);\r\n\t\t\t\t\t\t//$scope.currentAsset\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tconsole.log('Check current asset',JobCtrl.currentAsset.status === 1);\r\n\t\t\t\t\r\n\t\t\t\tJobCtrl.currentAsset.status === 1 ? angular.element('#status').get(0).checked = true : null;\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t});\r\n","'use strict';\n\n/**\n * @ngdoc function\n * @name jpApp.controller:JobsCtrl\n * @description\n * # JobsCtrl\n * Controller of the jpApp\n */\nangular.module('jpApp')\n\t.controller('JobsCtrl', function ($scope,jobs,$routeParams,$route,$location,$compile,$rootScope,jobsData)\n\t{\n\t\tvar JobsCtrl = this;\n\t\t\n\t\tJobsCtrl.jobs = jobsData;\n\t});\n","'use strict';\n\n/**\n * @ngdoc function\n * @name jpApp.controller:MainCtrl\n * @description\n * # MainCtrl\n * Controller of the jpApp\n */\nangular.module('jpApp')\n\t.controller('MainCtrl', function ($scope,jobs,elements,$rootScope,init,location/*,$state,$auth*/) {\n\t\t\n\t\tconsole.log('init',init);\t\n\t\tconsole.log('init rootScope',$rootScope);\t\n\t\t\t\t\n\t\t$scope.search = {\n\t\t\ttitle : $rootScope.user.location.location ?  $rootScope.user.location.location : init[1].formatted_address\n\t\t};\n\t\t\n\t\t/*\n\t\t$scope.getLocaton = function(){\n\t\t\tvar self = this;\n\t\t\tconsole.log('Get Location');\n\t\t\tif($rootScope.user.location){\n\t\t\t\tconsole.log('Root Location Found',$rootScope.user.location);\n\t\t\t\t$scope.search = {\n\t\t\t\t\ttitle : $rootScope.user.location.location\n\t\t\t\t};\n\t\t\t}else{\n\t\t\t\tlocation.getLocation().then(function(result){\n\t\t\t\t\tconsole.log('Get Location Found',result);\n\t\t\t\t\t$scope.search = {\n\t\t\t\t\t\ttitle : result[1].formatted_address\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t};\n\t\t*/\n\t\t\n\t\t$scope.data = init;\n\t\t\n\t\tvar autocomplete;\n\t\t\n\t\tconsole.log('Search',$scope.search);\n\t\t\n\t\tvar home_loc;\n\t\t\n\t\t$scope.findjobs = function(search){\n\t\t\tconsole.log('Search',search);\n\t\t\t/*\n\t\t\tjobs.findJobs($scope.search.place_id,$scope.search.job_id).then(function(result){\n\t\t\t\tconsole.log('Result',result);\n\t\t\t});\n\t\t\t*/\n\t\t}\n\t\t\n\t\tconsole.log('rootScope',$rootScope);\n\t\t\n\t\t$scope.search = $rootScope.user.location;\n\t\t\n\t\t//google.maps.event.addDomListener(window, 'load',function(){\n\n\t\t\tangular.element('#job_title').typeahead(null, {\n\t\t\t\tname: 'job_title',\n\t\t\t\tdisplay: 'title',\n\t\t\t\tsource: elements.form.bloodhound('/api/job_titles'),\n\t\t\t\thint: true,\n\t\t\t\thighlight: true,\n\t\t\t\tminLength: 0,\n\t\t\t\tlimit: 10,\n\t\t\t\ttemplates: {\n\t\t\t\t\tempty: [\n\t\t\t\t\t\t'<div class=\"tt-suggestion tt-empty-message collection\">',\n\t\t\t\t\t\t'No results were found ...',\n\t\t\t\t\t\t'</div>'\n\t\t\t\t\t].join('\\n'),\n\t\t\t\t\t//header: '<div class=\"collection-header\"><h6>'+name+'</h6></div>'\n\t\t\t\t\t//suggestion: Handlebars.compile('<div class=\"collection-item\">{{value}}</div>')\n\t\t\t\t},\n\t\t\t\tclassNames: {\n\t\t\t\t\tselectable: 'collection-item',\n\t\t\t\t\tdataset : 'collection'\n\t\t\t\t},\n\t\t\t\t//identify: function(obj) { return obj.name; },\n\t\t\t}).bind('typeahead:select', function(ev, suggestion) {\n\t\t\t\tvar asset = angular.element(ev.currentTarget).get(0).dataset.asset;\n\t\t\t\tconsole.log('Selection(name): ' + suggestion.name);\n\t\t\t\tconsole.log('Selection(id): ' + suggestion.id);\n\t\t\t\t//console.log('event: ' + asset);\n\t\t\t\t$scope.search.title = suggestion;\n\t\t\t\t//$scope.currentAsset[asset].name = suggestion.name;\n\n\t\t\t\t//$scope.currentAsset\n\t\t\t});\n\t\t//});\n\t\t\n\t\tconsole.log('Bloodhound',elements.form.bloodhound('/api/job_titles'));\n\t\t\n\t\t// Create the autocomplete object, restricting the search to geographical\n\t\t// location types.\n\t\tautocomplete = new google.maps.places.Autocomplete(\n\t\t\t/** @type {!HTMLInputElement} */(angular.element('input#job_location').get(0)),\n\t\t\t{types: ['geocode']});\n\t\t\t\n\t\tautocomplete.addListener('place_changed', function(){\n\t\t\tvar place = this.getPlace();\n\t\t\t\n\t\t\tconsole.log('Place',place);\n\t\t\t\n\t\t\t$scope.search = {};\n\t\t\t\n\t\t\t$scope.search.location = place.formatted_address;\n\t\t\t\n\t\t\t$scope.search.place_id = place.place_id;\n\t\t\t\n\t\t\tconsole.log('Place Search',$scope.search);\n\t\t\t\n\t\t});\n\t});\n","'use strict';\n\n/**\n * @ngdoc function\n * @name jpApp.controller:UserCtrl\n * @description\n * # UserCtrl\n * Controller of the jpApp\n */\nangular.module('jpApp')\n\t.controller('UserCtrl', function ($scope,$rootScope,modal,elements,validation,auth,form) {\n\t\t\n    \t$scope.signIn\t=\tfunction(){\n\t\t\tvar modalType\t=\t'small',\n\t\t\t\tmodalTitle\t=\t'Login',\n\t\t\t\tmodalBody\t=\tform.login(),\n\t\t\t\tmodalFooter\t=\telements.button({\ttype\t:\t'submit',\tcls:\t'btn-primary btn-lg btn-block',\tngClick\t:\t'login($event)'\t},'Login');\n\t\t\t\t\n\t\t\tmodal.modal(modalType,modalTitle,modalBody,modalFooter,$scope).then(function(result){\n\t\t\t\tconsole.log(result);\n\t\t\t\t\n\t\t\t});\n\t\t};\n\t\t\n\t\t$scope.login\t=\tfunction($event){\n\t\t\t//add Spinner\n\t\t\t$event.preventDefault();\n\t\t\t\n\t\t\tconsole.log($rootScope);\n\t\t\t\n\t\t\tvar modalContent\t=\tangular.element($event.currentTarget).parents()[1],\n\t\t\t\tform\t\t\t=\tangular.element(modalContent).find('form').serializeArray(),\n\t\t\t\tformData\t\t=\t{\n\t\t\t\t\temail\t\t:\tform[0].value,\n\t\t\t\t\tpassword\t: \tform[1].value\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tvalidation.validate(form).then(function(result){\n\t\t\t\t\t//remove spinner\n\t\t\t\t\tangular.element('.spinner').remove();\n\t\t\t\t\t\n\t\t\t\t\tif(result.valid){\n\t\t\t\t\t\t\n\t\t\t\t\t\t//console.log('Root',$root);\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tauth.authenticate(formData).then(function(result){\n\t\t\t\t\t\t\tconsole.log('Authentication Result',result);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\tconsole.log(result);\n\t\t\t\t\t}\t\n\t\t\t\t\t\n\t\t\t\t});\n\t\t};\n\t\t\n\t\t$scope.closeModal\t=\tfunction(){\n\t\t\tangular.element('#modal').modal('hide');\n\t\t};\n\t});\n","'use strict';\r\n\r\n/**\r\n * @ngdoc function\r\n * @name jpApp.controller:accountDataService\r\n * @description\r\n * # JobsCtrl\r\n * Controller of the jpApp\r\n */\r\nangular.module('jpApp')\r\n\t.controller('accountDataService', function ($q,$http)\r\n\t{\r\n\t\treturn {\r\n\t\t\taccountData : function(){\r\n\t\t\t\r\n\t\t\t},\r\n\t\t\tsaveData \t:\tfunction(){\r\n\t\t\t\r\n\t\t\t},\r\n\t\t\tgetJobs\t\t:\tfunction(){\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n","'use strict';\n\n/**\n * @ngdoc service\n * @name jpApp.auth\n * @description\n * # auth\n * Service in the jpApp.\n */\nangular.module('jpApp')\n\t.service('auth', function ($q,$http) {\n    // AngularJS will instantiate a singleton by calling \"new\" on this function\n\t\treturn\t{\n\t\t\tauthenticate\t:\tfunction(object){\n\t\t\t\tvar deferred\t=\t$q.defer();\n\t\t\t\t\t\n\t\t\t\tconsole.log('Form Object',object);\n\t\t\t\t\n\t\t\t\t//console.log($http.post('/api/authenticate'));\n\t\t\t\t\n\t\t\t\t$http.post('/api/authenticate',object).then(\tfunction(result){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(result);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.resolve(result);\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tfunction(error){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.resolve(error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn deferred.promise;\n\t\t\t},\n\t\t\tsetCookie : function(cname, cvalue, exdays) {\n\t\t\t\tvar d = new Date();\n\t\t\t\td.setTime(d.getTime() + (exdays*24*60*60*1000));\n\t\t\t\tvar expires = \"expires=\"+ d.toUTCString();\n\t\t\t\tdocument.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n\t\t\t},\n\t\t\tgetCookie : function(cname) {\n\t\t\t\tvar name = cname + \"=\";\n\t\t\t\tvar ca = document.cookie.split(';');\n\t\t\t\tfor(var i = 0; i <ca.length; i++) {\n\t\t\t\t\tvar c = ca[i];\n\t\t\t\t\twhile (c.charAt(0) == ' ') {\n\t\t\t\t\t\tc = c.substring(1);\n\t\t\t\t\t}\n\t\t\t\t\tif (c.indexOf(name) == 0) {\n\t\t\t\t\t\treturn c.substring(name.length, c.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn \"\";\n\t\t\t} \n\t\t};\n\t});\n","'use strict';\r\n\r\n/**\r\n * @ngdoc service\r\n * @name jpApp.jobs\r\n * @description\r\n * # jobs\r\n * Service in the jpApp.\r\n */\r\nangular.module('jpApp')\r\n\t.service('companies', function ($http,elements) {\r\n\t\t// AngularJS will instantiate a singleton by calling \"new\" on this function\r\n\t\treturn{\r\n\t\t\t/**\r\n\t\t\t * Returns a $http.get promise\r\n\t\t\t * @param {object} $data - The data for the GET request\r\n\t\t\t * @param {integer} $id - The id for the GET request\r\n\t\t\t * @returns {Promise}\r\n\t\t\t */\r\n\t\t\tgetData\t:\tfunction($data,$id){\r\n\t\t\t\tconsole.log($data+' id',$id);\r\n\t\t\t\tif($id){\r\n\t\t\t\t\treturn $http.get('api/'+$data+'/'+$id);\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn\t$http.get('api/'+$data);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * Returns a $http.post/put promise\r\n\t\t\t * @param {object} $data - The data for the GET request\r\n\t\t\t * @param {integer} $id - The id for the GET request\r\n\t\t\t * @returns {Promise}\r\n\t\t\t */\r\n\t\t\tsendData\t:\tfunction($name,$id,$data){\r\n\t\t\t\tconsole.log($name+' id',$id);\r\n\t\t\t\tif($id){\r\n\t\t\t\t\treturn $http.put('api/'+$name+'/'+$id,$data);\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn\t$http.post('api/'+$name,$data);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t};\r\n\t});\r\n","'use strict';\n\n/**\n * @ngdoc factory\n * @name jpApp.elements\n * @description\n * # elements\n * The Elements Factory in the jpApp.\n * This factory is used to generate all basic HTML elements for the UI.\n */\nangular.module('jpApp')\n  .factory('elements', function () {\n\tvar mockup = [\n\t\t{\n\t\t\ticon : 'insert_chart',\n\t\t\tcolor : 'red'\n\t\t},{\n\t\t\ticon : 'formal_quote',\n\t\t\tcolor : 'yellow darken-1'\n\t\t},{\n\t\t\ticon : 'publish',\n\t\t\tcolor : 'green'\n\t\t},{\n\t\t\ticon : 'attach_file',\n\t\t\tcolor : 'blue'\n\t\t}\n\t], self = this;\n    return {\n\t\t/**\n\t\t * Returns a row HTML element\n\t\t * @param {String} body - The body of the row element\n\t\t * @param {String} cls - additional classes for the row element\n\t\t * @returns {String}\n\t\t */\n\t\trow\t\t:\tfunction(body,cls){\n\t\t\tvar str = '';\n\t\t\t\n\t\t\tstr += '<div class=\"row';\n\t\t\tstr += cls ? cls : '';\n\t\t\tstr += '\">';\n\t\t\tstr += \t\tbody;\n\t\t\tstr += '</div>';\n\t\t\t\n\t\t\treturn str;\n\t\t},\n\t\t/**\n\t\t * Returns a column HTML element\n\t\t * @param {Integer} str - num of columns 1-12\n\t\t * @param {String} body - The body of the column element\n\t\t * @returns {String}\n\t\t */\n\t\tcolumn\t:\tfunction(num,body){\n\t\t\tvar str=\t'';\n\t\t\tif( typeof num ===\t'number'){\n\t\t\t\tstr\t+=\t'<div class=\"col m'+num+'\">';\n\t\t\t\tstr\t+=\t\tbody;\n\t\t\t\tstr\t+=\t'</div>';\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t}else{\n\t\t\t\tstr\t+=\t'<div class=\"col m'+num[0]+' s'+num[1]+'\">';\n\t\t\t\tstr\t+=\t\tbody;\n\t\t\t\tstr\t+=\t'</div>';\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Returns a button HTML element\n\t\t * @param {Object} object - The object holding the button element properties\n\t\t * @param {String} object.cls - The button class\n\t\t * @param {String} object.type - The button type\n\t\t * @param {String} object.ngClick - ngClick event for the button\n\t\t * @param {String} object.label - The button label\n\t\t * @returns {String}\n\t\t */\n\t\tbutton\t:\tfunction(object,body){\n\t\t\tvar str\t=\t'';\n\t\t\t\n\t\t\tstr\t+=\t'<button class=\"btn ';\n\t\t\tstr +=\t\tobject.cls ? object.cls+'\"' : '\"';\n\t\t\tstr\t+=\t\tobject.type\t\t?\t'type=\"'+object.type+'\"'\t:\t'';\n\t\t\tstr\t+=\t\tobject.ngClick\t?\t'ng-click=\"'+object.ngClick+'\">'\t:\t'>';\n\t\t\tstr\t+=\t\tobject.label ? object.label : 'Button Label';\n\t\t\tstr\t+=\t'</button>';\n\t\t\t\n\t\t\treturn str;\n\t\t},\n\t\t/**\n\t\t * Returns a materalize button toolbar\n\t\t * @param {string} action - The action associated the primary button\n\t\t * @param {string} icon - The icon for the secondary button\n\t\t * @param {array} array - The array holding the secondary buttons objects\n\t\t * @param {String} array.value.color - The secondary button color based on materialize\n\t\t * @param {String} array.value.action - The secondary action\n\t\t * @param {String} array.value.icon - The secondary button icon\n\t\t * @returns {String}\n\t\t */\n\t\ttoolbar : function(action,type,icon,array){\n\t\t\tvar str = '';\n\t\t\t\n\t\t\tstr += '<div class=\"fixed-action-btn '+(type ? 'horizontal' : '')+' click-to-toggle\">';\n\t\t\tstr += '\t<a class=\"btn-floating btn-large red\" '+action+'>';\n\t\t\tstr += '\t  <i class=\"material-icons\">'+(icon ? icon : 'menu')+'</i>';\n\t\t\tstr += '\t</a>';\n\t\t\tif(array){ \n\t\t\tstr += '<ul>';\n\t\t\t\tangular.forEach(array,function(value,key){\n\t\t\t\t\tstr += value ? '<li><a class=\"btn-floating '+(value.color ? value.color : 'red')+'\" '+(value.action ? value.action : '')+'><i class=\"material-icons\">'+(value.icon ? value.icon : 'insert_chart')+'</i></a></li>' : '';\n\t\t\t\t});\n\t\t\tstr += '</ul>';\n\t\t\t}\n\t\t\tstr += '</div>';;\n\t\t},\n\t\t/**\n\t\t * Returns the form object for generic form elements\n\t\t * @returns {object}\n\t\t */\n\t\tform\t:\t{\n\t\t\t/**\n\t\t\t * Returns an input element\n\t\t\t * @param {object} object - The object holding the input element attributes\n\t\t\t * @param {Integer} object.colSize - The column size of the input element ( Defaults to 12 )\n\t\t\t * @param {string} object.cls - addtional classes for the input element\n\t\t\t * @param {string} object.label - The label for the input field\n\t\t\t * @param {String} object.model - The 2 way data binding for to the $scope (Angular Js)\n\t\t\t * @param {String} object.name - The name attribute for the input element\n\t\t\t * @param {String} object.value - The value attribute for the input element\n\t\t\t * @param {boolean} object.required - The required attribute for the input element. Used for validation\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\tinput\t:\tfunction(object){\n\t\t\t\tvar\tstr\t=\t'',self = this;\n\t\t\t\t\n\t\t\t\tstr +=\t'<div class=\"input-field ';\n\t\t\t\tstr +=  object.colSize ? 'col m'+object.colSize.toString()+' s12\">' : 'col s12\">';\n\t\t\t\tstr\t+=\t'<input ';\n\t\t\t\tstr\t+=\tobject.type\t?\t'type=\"'+object.type+'\"' : '';\n\t\t\t\tstr\t+=\tobject.cls  ? \t'class=\"'+object.cls+'\"' : '';\n\t\t\t\tstr\t+=\tobject.label ? ' placeholder=\"'+object.label+'\"' : '';\n\t\t\t\tstr\t+=\tobject.model\t?\t' ng-model=\"'+object.model+'\" '\t:\t'';\n\t\t\t\tstr\t+=\tobject.value\t?\t' ng-value=\"'+object.model+'\" '\t:\t'';\n\t\t\t\tstr\t+=\tobject.name\t?\t' name=\"'+object.name+'\" id=\"'+object.name+'\"'\t:\t'';\n\t\t\t\tstr\t+=\tobject.required\t?\t' data-required=\"true\" required=\"true\"'\t:\t'';\n\t\t\t\t//str +=  object.typeahead ? 'sf-typeahead options=\"typeahead\" datasets=\"'+object.typeahead.datasets+'\"' : '';\n\t\t\t\tif(object.typeahead){\n\t\t\t\t\tstr +=  object.asset ? 'data-asset=\"'+object.asset+'\"' : '';\n\t\t\t\t}\n\t\t\t\tstr\t+=\t'>';\n\t\t\t\tstr\t+=\t'<label ';\n\t\t\t\tstr\t+=\tobject.model\t?\t' class=\"active\" '\t:\t'';\n\t\t\t\tstr\t+=  'for=\"'+object.name+'\">';\n\t\t\t\tstr\t+=\tobject.label ?  object.label+(object.required ? ' *' : '') : '';\n\t\t\t\tstr +=  '</label>';\n\t\t\t\tstr +=  '</div>';\n\t\t\t\t/*\n\t\t\t\tif(object.typeahead){\n\t\t\t\t\tvar bloodhound = self.bloodhound('/'+object.asset);\n\t\t\t\t\t\n\t\t\t\t\tconsole.log('Bloodhound',bloodhound);\n\t\t\t\t\tconsole.log('Name','#'+object.name);\n\t\t\t\t\tconsole.log('Element',angular.element('#'+object.name));\n\t\t\t\t\t\n\t\t\t\t\tangular.element('#'+object.name).typeahead(null, {\n\t\t\t\t\t\tname: object.name,\n\t\t\t\t\t\tdisplay: 'name',\n\t\t\t\t\t\tsource: bloodhound.ttAdapter(),\n\t\t\t\t\t\thint: true,\n\t\t\t\t\t\thighlight: true,\n\t\t\t\t\t\tminLength: 0,\n\t\t\t\t\t\ttemplates: {\n\t\t\t\t\t\t\tempty: [\n\t\t\t\t\t\t\t\t'<div class=\"tt-suggestion tt-empty-message collection\">',\n\t\t\t\t\t\t\t\t'No results were found ...',\n\t\t\t\t\t\t\t\t'</div>'\n\t\t\t\t\t\t\t].join('\\n'),\n\t\t\t\t\t\t\t//suggestion:'<div class=\"collection-item\">{{value}}</div>'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclassNames: {\n\t\t\t\t\t\t\tselectable: 'collection-item',\n\t\t\t\t\t\t\tdataset : 'collection'\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns an input group element\n\t\t\t * @param {icon} object - The icon for the element attributes \n\t\t\t * @param {object} object - The object holding the element attributes\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\tinputGroup\t:\tfunction(icon,object){\n\t\t\t\tvar str\t\t=\t'',\n\t\t\t\t\tself\t=\tthis;\n\t\t\n\t\t\t\tstr\t+=\t'<div class=\"input-field\">';\n\t\t\t\tstr\t+=\t\t'<i class=\"material-icons prefix\">'+icon+'</i>';\n\t\t\t\tstr\t+=\t\tself.input(object);\n\t\t\t\tstr\t+=\t'</div>';\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns a select element\n\t\t\t * @param {Integer} object.colSize - The column size of the input element ( Defaults to 12 )\n\t\t\t * @param {string} object.cls - addtional classes for the input element\n\t\t\t * @param {string} object.label - The label for the input field\n\t\t\t * @param {String} object.model - The 2 way data binding for to the $scope (Angular Js)\n\t\t\t * @param {String} object.name - The name attribute for the input element\n\t\t\t * @param {boolean} object.required - The required attribute for the input element. Used for validation\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\tselect\t:\tfunction(object){\n\t\t\t\tvar str\t=\t'';\n\t\t\t\t\n\t\t\t\tstr +=\t'<div class=\"input-field col m'+object.colSize.toString()+' s12\">';\n\t\t\t\tstr +=\t'<select ';\n\t\t\t\tstr +=\tobject.cls ? 'class=\"'+object.cls+'\"' : '';\n\t\t\t\tstr +=\tobject.model ? 'ng-model=\"'+object.model+'\"' : '';\n\t\t\t\tstr\t+=\tobject.name\t?\t' name=\"'+object.name+'\" id=\"'+object.name+'\"'\t:\t'';\n\t\t\t\tstr\t+=\tobject.required\t?\t' data-required=\"true\" required=\"true\"'\t:\t'';\n\t\t\t\tstr +=\t'ng-options=\"g as g.name for g in $root[\\''+object.asset+'\\'].options.'+object.name+'s track by g.id\">';\n\t\t\t\t//str +=\t'<option value=\"\" disabled selected>Choose your option</option>';\n\t\t\t\tstr +=\t'</select>';\n\t\t\t\tstr +=\tobject.label ? '<label>'+object.label+(object.required ? ' *' : '')+'</label>' : '';\n\t\t\t\tstr +=\t'</div>';\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns a textarea element\n\t\t\t * @param {Integer} object.colSize - The column size of the element ( Defaults to 12 )\n\t\t\t * @param {string} object.cls - addtional classes for the element\n\t\t\t * @param {string} object.label - The label for the element\n\t\t\t * @param {String} object.model - The 2 way data binding for to the $scope (Angular Js)\n\t\t\t * @param {String} object.name - The name attribute for the element\n\t\t\t * @param {boolean} object.required - The required attribute for the element. Used for validation\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\ttextarea\t:\tfunction(object){\n\t\t\t\tvar str\t=\t'';\n\t\t\t\t\n\t\t\t\tstr +=\t'<div class=\"input-field col m'+object.colSize.toString()+' s12\">';\n\t\t\t\tstr +=\t'<textarea class=\"materialize-textarea';\n\t\t\t\tstr +=\tobject.cls ? object.cls+'\"' : '\"';\n\t\t\t\tstr\t+=\tobject.name\t?\t' name=\"'+object.name+'\" id=\"'+object.name+'\"'\t:\t'';\n\t\t\t\tstr\t+=\tobject.required\t?\t' data-required=\"true\" required=\"true\"'\t:\t'';\n\t\t\t\tstr +=\tobject.model ? 'ng-model=\"'+object.model+'\">' : '>';\n\t\t\t\tstr +=\t'</textarea>';\n\t\t\t\t//str +=\tobject.label ? '<label>'+object.label+'</label>' : '';\n\t\t\t\tstr +=\t'</div>';\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the materialize chips component\n\t\t\t * @param {object} object - The object holding the chip element properties\n\t\t\t * @param {string} object.chipType - The chip type based on the materialize\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\tchips\t:\tfunction(object){\n\t\t\t\tvar str\t=\t'';\n\t\t\t\t\n\t\t\t\tstr\t+=\t' <div class=\"chips '+object.chipType+'\"></div>';\n\t\t\t\treturn \tstr;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the materialize range component\n\t\t\t * @param {object} object - The object holding the range element properties\n\t\t\t * @param {string} object.cls - addtional classes for the element\n\t\t\t * @param {string} object.label - The label for the element\n\t\t\t * @param {String} object.model - The 2 way data binding for to the $scope (Angular Js)\n\t\t\t * @param {String} object.name - The name attribute for the element\n\t\t\t * @param {String} object.min - The maximum range\n\t\t\t * @param {String} object.max - The minimum range\n\t\t\t * @param {boolean} object.required - The required attribute for the element. Used for validation\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\trange\t:\tfunction(object){\n\t\t\t\tvar str\t=\t'';\n\t\t\t\t\n\t\t\t\tstr\t+=\t'<p class=\"range-field col m'+object.colSize.toString()+' s12\">';\n\t\t\t\tstr\t+=\t\t'<label>'+object.label+(object.required ? '*' : '')+' '+( object.model ? ' ( {{ '+object.model+' }} years )' : '' )+'</label>';\n\t\t\t\tstr\t+=\t\t'<input type=\"range\"';\n\t\t\t\tstr\t+=\t\tobject.name\t?\t' name=\"'+object.name+'\" id=\"'+object.name+'\"'\t:\t'';\n\t\t\t\tstr\t+=\t\tobject.model\t?\t' ng-model=\"'+object.model+'\" '\t:\t'';\n\t\t\t\tstr\t+=\t\tobject.min ? 'min=\"'+object.min+'\"' : '';\n\t\t\t\tstr\t+=\t\tobject.max ? 'max=\"'+object.max+'\"' : '';\n\t\t\t\t//str\t+=\t\tobject.step ? 'step=\"'+object.step+'\"' : '';\n\t\t\t\tstr\t+=\t\tobject.required ? 'required />' : ' />';\n\t\t\t\tstr\t+=\t'</p>';\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns a switch element\n\t\t\t * @param {Integer} object.colSize - The column size of the element ( Defaults to 12 )\n\t\t\t * @param {string} object.cls - addtional classes for the element\n\t\t\t * @param {string} object.label1 - The label1 for the element\n\t\t\t * @param {string} object.label2 - The label2 for the element\n\t\t\t * @param {String} object.model - The 2 way data binding for to the $scope (Angular Js)\n\t\t\t * @param {String} object.name - The name attribute for the element\n\t\t\t * @param {boolean} object.required - The required attribute for the element. Used for validation\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\tcheck\t:\tfunction(object){\n\t\t\t\tvar str\t=\t'';\n\t\t\t\t\n\t\t\t\tstr\t+=\t'<div class=\"switch col m'+object.colSize.toString()+' s12\">';\n\t\t\t\tstr\t+=\t'\t<label>';\n\t\t\t\tstr\t+=\tobject.label1;\n\t\t\t\tstr\t+=\t'\t  <input type=\"checkbox\"';\n\t\t\t\tstr\t+=\tobject.model\t?\t' ng-model=\"'+object.model+'\" '\t:\t'';\n\t\t\t\tstr\t+=\tobject.name\t?\t' name=\"'+object.name+'\" id=\"'+object.name+'\"'\t:\t'';\n\t\t\t\tstr\t+=\tobject.required\t?\t' data-required=\"true\" required=\"true\"'\t:\t'';\n\t\t\t\tstr\t+=\t'\t  >';\n\t\t\t\tstr\t+=\t'\t  <span class=\"lever\"></span>';\n\t\t\t\tstr\t+=\tobject.label2;\n\t\t\t\tstr\t+=\t'\t</label>';\n\t\t\t\tstr\t+=\t'</div>';\n  \n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns a date element\n\t\t\t * @param {Integer} object.colSize - The column size of the date element ( Defaults to 12 )\n\t\t\t * @param {string} object.cls - addtional classes for the date element\n\t\t\t * @param {string} object.label - The label for the date field\n\t\t\t * @param {String} object.model - The 2 way data binding for to the $scope (Angular Js)\n\t\t\t * @param {String} object.name - The name attribute for the date element\n\t\t\t * @param {boolean} object.required - The required attribute for the date element. Used for validation\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\tdate\t:\tfunction(object){\n\t\t\t\tvar str\t=\t'';\n\t\t\t\t\n\t\t\t\tstr +=\t'<div class=\"col s12 m'+object.colSize.toString()+'\">';\n\t\t\t\tstr +=\tobject.label ? '<label>'+object.label+(object.required ? ' *' : '')+'</label>' : '';\n\t\t\t\tstr\t+= ' <input type=\"date\" ';\n\t\t\t\tstr\t+= 'class=\"datepicker';\n\t\t\t\tstr +=\tobject.cls ? object.cls+'\"' : '\"';\n\t\t\t\tstr\t+=\tobject.name\t?\t' name=\"'+object.name+'\" id=\"'+object.name+'\"'\t:\t'';\n\t\t\t\tstr\t+=\tobject.model\t?\t' ng-model=\"'+object.model+'\" '\t:\t'';\n\t\t\t\tstr\t+=\tobject.required\t?\t' data-required=\"true\" required=\"true\"'\t:\t'';\n\t\t\t\tstr\t+=\tobject.required ? 'required />' : ' />';\n\t\t\t\tstr += '</div>';\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns a radio element\n\t\t\t * @param {Integer} object.colSize - The column size of the date element ( Defaults to 12 )\n\t\t\t * @param {string} object.cls - addtional classes for the date element\n\t\t\t * @param {string} object.label - The label for the date field\n\t\t\t * @param {String} object.model - The 2 way data binding for to the $scope (Angular Js)\n\t\t\t * @param {String} object.name - The name attribute for the date element\n\t\t\t * @param {boolean} object.required - The required attribute for the date element. Used for validation\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\tradio\t:\tfunction(object){\n\t\t\t\tvar str\t=\t'';\n\t\t\t\t\n\t\t\t\tstr +=\t'<div class=\"col s12 m'+object.colSize.toString()+'\">';\n\t\t\t\tstr\t+= ' <input type=\"radio\" ';\n\t\t\t\tstr\t+= 'class=\"datepicker';\n\t\t\t\tstr +=\tobject.cls ? object.cls+'\"' : '\"';\n\t\t\t\tstr\t+=\tobject.name\t?\t' name=\"'+object.name+'\" id=\"'+object.name+'\"'\t:\t'';\n\t\t\t\tstr\t+=\tobject.model\t?\t' ng-model=\"'+object.model+'\" '\t:\t'';\n\t\t\t\tstr\t+=\tobject.required\t?\t' data-required=\"true\" required=\"true\"'\t:\t'';\n\t\t\t\tstr\t+=\tobject.required ? 'required />' : ' />';\n\t\t\t\tstr +=\tobject.label ? '<label>'+object.label+(object.required ? ' *' : '')+'</label>' : '';\n\t\t\t\tstr += '</div>';\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the bloodhound twitter typeahead element\n\t\t\t * @param {string} source - bloodhound prefetch url\n\t\t\t * @returns {object}\n\t\t\t */\n\t\t\tbloodhound : function(source){\n\t\t\t\tvar bloodhound = new Bloodhound({\n\t\t\t\t\tdatumTokenizer: function(d) { return Bloodhound.tokenizers.whitespace(d.name); },\n\t\t\t\t\tqueryTokenizer: Bloodhound.tokenizers.whitespace,\n\t\t\t\t\tprefetch: source,\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn bloodhound;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Returns materalize icons\n\t\t * @param {String} type - The type of icon based on https://material.io/icons/\n\t\t * @returns {String}\n\t\t */\n\t\tglyph\t:\tfunction(type){\n\t\t\tvar str\t=\t'';\n\t\t\t\n\t\t\tstr\t+=\t'<span class=\"glyphicon glyphicon-'+type+'\" aria-hidden=\"true\"></span>';\n\n\t\t\treturn str;\n\t\t}\n    };\n  });\n","'use strict';\n\n/**\n * @ngdoc service\n * @name jpApp.form\n * @description\n * # form\n * Service in the jpApp.\n */\nangular.module('jpApp')\n\t.service('form', function (elements) {\n\t\t// AngularJS will instantiate a singleton by calling \"new\" on this function\n\t\treturn\t{\n\t\t\t/**\n\t\t\t * Returns the login form\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\tlogin\t:\tfunction(){\n\t\t\t\tvar\tstr\t=\t'';\n\t\t\t\t\n\t\t\t\tstr\t+=\t'<form>';\n\t\t\t\tstr += \t'<div class=\"row\">';\n\t\t\t\tstr\t+=\t\telements.column(12,elements.button({ ngClick : 'authenticate(\\'linkedin\\')',label:'login with LinkedIn' , cls : 'hide btn-large col s12' }));\n\t\t\t\tstr += \t'</div>';\n\t\t\t\tstr\t+=\t'<div class=\"row form-group\">';\n\t\t\t\tstr\t+=\telements.column(12,elements.form.inputGroup('info_outline',{ \t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype\t\t:\t'email',\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcls\t\t\t:\t'input-lg validate'\t,\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder\t:\t'Email'\t,\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel\t\t:\t'email',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname\t\t:\t'email',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired\t:\ttrue\n\t\t\t\t\t\t\t\t\t\t\t\t\t}));\n\t\t\t\tstr\t+=\t'</div>';\n\t\t\t\tstr\t+=\t'<div class=\"row form-group\">';\n\t\t\t\tstr\t+=\telements.column(12,elements.form.inputGroup('lock',{ \t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype\t\t:\t'password',\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcls\t\t\t:\t'input-lg validate'\t,\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder\t:\t'Password'\t,\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel\t\t:\t'password',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname\t\t:\t'password',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired\t:\ttrue\n\t\t\t\t\t\t\t\t\t\t\t\t\t}));\n\t\t\t\tstr\t+=\t'</div>';\n\t\t\t\tstr\t+=\t'<div class=\"row form-group\">';\n\t\t\t\tstr\t+=\telements.column(12,elements.button({ ngClick : 'login($event)',label:'login' , cls : 'btn-large col s12' }));\n\t\t\t\tstr\t+=\t'</div>';\n\t\t\t\tstr\t+=\t'</form>';\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the Registration form\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\tregister\t:\tfunction(){\n\t\t\t\tvar str\t=\t'';\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the form to edit a job\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\teditJob\t\t:\tfunction(id){\n\t\t\t\t\n\t\t\t\t//console.log('Job id',id);\n\t\t\t\t\n\t\t\t\tvar str\t=\t'';\n\t\t\t\t\n\t\t\t\t\tstr\t+=\t'<form>';\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text' ,colSize: 6, cls:'autocomplete', model:'currentAsset.title' , label : 'Job Title' , name : 'job_title' , required:true });\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text', colSize: 2, cls:'typeahead' , label : 'Job Type e.g Full time , Part time..', name : 'job_types' , model:'currentAsset.job_type.name' , required:true , asset :'job_type',typeahead : { datasets:'jobTypes'}});\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text', colSize: 2, cls:'typeahead' , label : 'Job Level e.g Entry , Junior, Intermediate..' , name : 'job_levels' , model:'currentAsset.job_level.name' , required:true , asset :'job_level',typeahead : { datasets:'jobLevels'}});\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text', colSize: 2, cls:'typeahead' , label : 'Job Category' , name : 'job_categories' , model:'currentAsset.job_category.name' , required:true , asset :'job_category',typeahead : { datasets:'jobCategories'}});\n\t\t\t\t\tstr\t+=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text' ,colSize: 6, cls:'autocomplete', model:'currentAsset.location.name' , label : 'Job Location' , name : 'job_location' , required:true });\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text', colSize: 6, cls:'typeahead' , label : 'Minimum Qualification' , name : 'min_qualifications' , model:'currentAsset.min_qualification' , required:true , asset :'min_qualification',typeahead : { datasets:'minQualification'}});\n\t\t\t\t\tstr\t+=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\telements.form.range({ colSize: 12, cls:'', model:'currentAsset.min_experience' , label : 'Minimum Experience' , name : 'job_min_experience' , min:0,max:15 });\n\t\t\t\t\tstr\t+=\t\t'</div>';\t\t\t\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\t'<div class=\"range-field col m12 s12\">';\n\t\t\t\t\tstr\t+=\t\t\t\t'<label>Salary <span class=\"min\"></span> - <span class=\"max\"></span> {{ currentAsset.salary_type.name }}</label>';\n\t\t\t\t\tstr\t+=\t\t\t\t'<div id=\"pay\"></div>';\n\t\t\t\t\tstr\t+=\t\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text', colSize: 12, cls:'typeahead' , label : 'Salary Type' , name : 'salary_types' , model:'currentAsset.salary_type.name' , required:true , asset :'salary_type',typeahead : { datasets:'salaryTypes'}});\n\t\t\t\t\tstr\t+=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\telements.form.textarea({ colSize: 12, cls:'' , label : 'Job Description' , name : 'job_description' , model:'currentAsset.description' , required:true});\n\t\t\t\t\tstr\t+=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\t'<div class=\"range-field col m12 s12\">';\n\t\t\t\t\tstr\t+=\t\t\t'<label>Required Skills</label>';\n\t\t\t\t\tstr\t+=\t\t\telements.form.chips({ colSize: 12, cls:'' , label : 'Required Skills' , name : 'required_skills' , model:'currentAsset.required_skills',chipType : 'chips-autocomplete'});\n\t\t\t\t\tstr\t+=\t\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\telements.form.date({ colSize: 12, cls:'' , label : 'Application Deadline' , name : 'application_deadline' , model:'currentAsset.application_deadline', required:true });\n\t\t\t\t\tstr\t+=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t'</form>';\n\t\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the edit company form\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\teditCompany\t\t:\tfunction(){\n\t\t\t\tvar str\t=\t'';\n\t\t\t\t\n\t\t\t\t\tstr\t+=\t'<form>';\n\t\t\t\t\t//str +=\t\telements.row(elements.toolbar('ng-click=\"action()\"'));\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text' ,colSize: 4, cls:'autocomplete', model:'currentAsset.name' , label : 'Company Name' , name : 'company_name' , required:true });\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text', colSize: 4, cls:'typeahead' , label : 'Company Type e.g Software , Construction ', name : 'company_cat' , model:'currentAsset.company_category[0].name' , required:true , asset :'company_category',typeahead : { datasets:'companyCats'}});\n\t\t\t\t\t//str\t+=\t\t\telements.form.select({ colSize: 4, cls:'' , label : 'Company Category' , name : 'company_cat' , model:'currentAsset.company_category' , required:true ,asset:'company'});\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text' ,colSize: 4, cls:'autocomplete', model:'currentAsset.location.name' , label : 'Company Location' , name : 'company_location' , required:true });\n\t\t\t\t\tstr\t+=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text' ,colSize: 8, cls:'', model:'currentAsset.address' , label : 'Company Address' , name : 'company_address' , required:false });\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text' ,colSize: 4, cls:'', model:'currentAsset.zipcode' , label : 'Zipcode' , name : 'zipcode' , required:false });\n\t\t\t\t\tstr +=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\telements.form.textarea({ colSize: 12, cls:'' , label : 'Company Description' , name : 'company_description' , model:'currentAsset.description' , required:true});\n\t\t\t\t\tstr\t+=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t\t'<div class=\"row\">';\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'email' ,colSize: 4, cls:'', model:'currentAsset.email' , label : 'Email Address' , name : 'email' , required:false });\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'tel' ,colSize: 4, cls:'', model:'currentAsset.phone' , label : 'Phone Number' , name : 'phone' , required:false });\n\t\t\t\t\tstr\t+=\t\t\telements.form.input({ type:'text' ,colSize: 4, cls:'', model:'currentAsset.logo' , label : 'Company Logo' , name : 'logo' });\n\t\t\t\t\tstr\t+=\t\t'</div>';\n\t\t\t\t\tstr\t+=\t'</form>';\n\t\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t}\n\t\t};\n\t});\n","'use strict';\n\n/**\n * @ngdoc service\n * @name jpApp.jobs\n * @description\n * # jobs\n * Service in the jpApp.\n */\nangular.module('jpApp')\n\t.service('jobs', function ($http,elements) {\n\t\t// AngularJS will instantiate a singleton by calling \"new\" on this function\n\t\treturn{\n\t\t\t/**\n\t\t\t * Returns a $http.get promise to get a job based on the job id\n\t\t\t * @param {object} $data - The data for the GET request\n\t\t\t * @param {integer} $id - The id for the GET request\n\t\t\t * @returns {Promise}\n\t\t\t */\n\t\t\tgetData\t:\tfunction($data,$id){\n\t\t\t\tconsole.log($data+' id',$id);\n\t\t\t\tif($id){\n\t\t\t\t\treturn $http.get('api/'+$data+'/'+$id);\n\t\t\t\t}else{\n\t\t\t\t\treturn\t$http.get('api/'+$data);\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns a $http.put or post promise to store a job based on job id and its data\n\t\t\t * @param {String} $name - The name of the PUT/POST endpoint\n\t\t\t * @param {object} $data - The data for the PUT/POST request\n\t\t\t * @param {integer} $id - The id for the PUT/POST enpoint\n\t\t\t * @returns {Promise}\n\t\t\t */\n\t\t\tsendData\t:\tfunction($name,$id,$data){\n\t\t\t\tconsole.log($name+' id',$id);\n\t\t\t\tif($id){\n\t\t\t\t\treturn $http.put('api/'+$name+'/'+$id,$data);\n\t\t\t\t}else{\n\t\t\t\t\treturn\t$http.post('api/'+$name,$data);\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns a $http.put or post promise to store a job based on job id and its data\n\t\t\t * @param {String} $name - The name of the PUT/POST endpoint\n\t\t\t * @param {object} $data - The data for the PUT/POST request\n\t\t\t * @param {integer} $id - The id for the PUT/POST enpoint\n\t\t\t * @returns {Promise}\n\t\t\t */\n\t\t\tfindJobs : function(location_id,job_id){\n\t\t\t\treturn $http.get('api/locations/'+location_id+'/jobs/'+job_id);\n\t\t\t}\n\t\t};\n\t});\n","'use strict';\r\n\r\n/**\r\n * @ngdoc service\r\n * @name jpApp.location\r\n * @description\r\n * # location\r\n * Service in the jpApp.\r\n */\r\nangular.module('jpApp')\r\n\t.service('location', function ($q) {\r\n\t\t// AngularJS will instantiate a singleton by calling \"new\" on this function\r\n\t\treturn{\r\n\t\t\t/**\r\n\t\t\t * Returns the current location of the user\r\n\t\t\t * @returns {Promise}\r\n\t\t\t */\r\n\t\t\tgetLocation\t:\tfunction(){\r\n\t\t\t\tvar deferred = $q.defer(),\r\n\t\t\t\t\tself = this;\r\n\t\t\t\t\r\n\t\t\t\tnavigator.geolocation.getCurrentPosition(function(pos){\r\n\t\t\t\t\tconsole.log('App Pos',pos);\r\n\t\t\t\t\t//$rootScope.user.location.geo = {lat: , lng: };\r\n\t\t\t\t\tself.geoCoder(pos.coords.latitude,pos.coords.longitude).then(function(result){\r\n\t\t\t\t\t\tdeferred.resolve(result)\r\n\t\t\t\t\t}).catch(function(error){\r\n\t\t\t\t\t\t//To Do Logging Service \r\n\t\t\t\t\t\tconsole.error(error);\r\n\t\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn deferred.promise;\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * Returns a location based on longitude and latitude\r\n\t\t\t * @param {int} lat - Latitude\r\n\t\t\t * @param {int} lng - Longitude\r\n\t\t\t * @returns {Promise}\r\n\t\t\t */\r\n\t\t\tgeoCoder : function(lat,lng){\r\n\t\t\t\tvar geo = new google.maps.Geocoder,\r\n\t\t\t\t\tdeferred = $q.defer();\r\n\t\t\r\n\t\t\t\tgeo.geocode({'location': {lat: lat, lng: lng}}, function(result, status) {\r\n\t\t\t\t\tconsole.log('Geo Coder Result',result,status);\r\n\t\t\t\t\tif(result.length >= 1){\r\n\t\t\t\t\t\tdeferred.resolve(result);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tdeferred.reject(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn deferred.promise;\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n","'use strict';\n\n/**\n * @ngdoc service\n * @name jpApp.modalService\n * @description\n * # modalService\n * Service in the jpApp.\n */\nangular.module('jpApp')\n  .service('modal', function ($q,$compile) {\n    // AngularJS will instantiate a singleton by calling \"new\" on this function\n\treturn\t{\n\t\tmodal\t:\tfunction(type,title,body,footer,$scope){\n\t\t\t\t\t\t\n\t\t\tvar str\t=\t'',\n\t\t\t\tdeferred\t=\t$q.defer();\n\t\t\t\n\t\t\tstr\t+=\t'<div id=\"modal\" class=\"modal '+type+'\">';\n\t\t\tstr += \t\t'<div class=\"container\">';\n\t\t\tstr\t+=\t\t\t'<div class=\"modal-content\">';\n\t\t\tstr += \t\t\t\t'<div class=\"row\">';\n\t\t\tstr\t+=\t\t\t\t\ttitle;\n\t\t\tstr\t+=\t\t\t\t'</div>';\n\t\t\tstr\t+=\t\t\t\t'<div class=\"row\">'+body+'</div>';\n\t\t\tstr\t+=\t\t\t'</div>';\n\t\t\tstr\t+=\t\t\tfooter ? '<div class=\"modal-footer\">'+footer+'</div>' : '';\n\t\t\tstr\t+=\t\t'</div>';\n\t\t\tstr\t+=\t'</div>';\n\t\t\t\n\t\t\tangular.element('body').append($compile(str)($scope));\n\t\t\t\n\t\t\tdeferred.resolve(str);\n\t\t\t\n\t\t\tangular.element('#modal').modal({ complete : function(){ angular.element('#modal').remove(); } }).modal('open');\n\t\t\t\n\t\t\treturn deferred.promise;\n\t\t}\n\t};\n  });\n","'use strict';\n\n/**\n * @ngdoc service\n * @name jpApp.validation\n * @description\n * # validation\n * Service in the jpApp.\n */\nangular.module('jpApp')\n\t.service('validation', function ($q) {\n\t\t// AngularJS will instantiate a singleton by calling \"new\" on this function\n\t\treturn {\n\t\t\tvalidate\t:\tfunction(form){\n\t\t\t\tvar deferred\t\t=\t$q.defer(),\n\t\t\t\t\tvalidated\t\t=\t[],\n\t\t\t\t\tformElement\t\t=\tangular.element(form),\n\t\t\t\t\tvalidatedCount\t=\t0,\n\t\t\t\t\telemCount\t\t=\tformElement.find('input').length;\n\t\t\t\t\t\t\n\t\t\tformElement.find('input').each(function(){\n\t\t\t\t\t\t\tvar element = angular.element(this);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(element[0].dataset.required){\n\t\t\t\t\t\t\t\tif(element.val()){\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//add success class\n\t\t\t\t\t\t\t\t\telement.parent().removeClass('has-success')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.removeClass('has-error')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addClass('has-success');\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvalidated.push({\n\t\t\t\t\t\t\t\t\t\tname\t\t:\telement[0].name,\n\t\t\t\t\t\t\t\t\t\tvalue\t\t:\telement.val(),\n\t\t\t\t\t\t\t\t\t\tvalidated\t:\ttrue\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvalidatedCount++;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t//add error validation class to form element\n\t\t\t\t\t\t\t\t\telement.parent().removeClass('has-success')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.removeClass('has-error')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addClass('has-error');\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvalidated.push({\n\t\t\t\t\t\t\t\t\t\tname\t\t:\telement[0].name,\n\t\t\t\t\t\t\t\t\t\tvalue\t\t:\telement.val(),\n\t\t\t\t\t\t\t\t\t\tvalidated\t:\tfalse\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t//add success class\n\t\t\t\t\t\t\t\telement.parent().removeClass('has-error').addClass('has-success');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvalidated.push({\n\t\t\t\t\t\t\t\t\tname\t\t:\telement[0].name,\n\t\t\t\t\t\t\t\t\tvalue\t\t:\telement.val(),\n\t\t\t\t\t\t\t\t\tvalidated\t:\ttrue\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t});\n\t\t\t\t\n\t\t\t\tconsole.log('Form Object',validatedCount,elemCount);\n\t\t\t\t\n\t\t\t\tif(validatedCount\t===\telemCount){\n\t\t\t\t\tdeferred.resolve({\tvalid\t:\ttrue\t,\tform\t:\tform\t});\n\t\t\t\t}else{\n\t\t\t\t\tdeferred.resolve({\tvalid\t:\tfalse\t,\tform\t:\tform\t});\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\treturn deferred.promise;\n\t\t\t}\n\t\t};\n\t});\n"]}